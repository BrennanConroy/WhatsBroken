// *************************************************************************
// Dumps a list of failing tests for the period defined by 'start' and 'end'
// *************************************************************************
declare query_parameters(Start: datetime = datetime(null), End: datetime = datetime(null), Repositories: string = "dotnet/aspnetcore;dotnet-aspnetcore", Branches:string = "refs/heads/master", IncludeQuarantined: bool = bool(false));

let startVal = coalesce(Start, startofday(now(), -7));
let endVal = coalesce(End, endofday(now()));
let repositories = datatable (A: string) [""] | extend Repos = split(Repositories, ";") | mv-expand Repos | project Repos;
let branchFilter = datatable (A: string) [""] | extend Branches = split(Branches, ";") | mv-expand Branches | where not(isempty(Branches)) | project Branches;

Jobs
| where Repository in (repositories) and Finished between (startVal..endVal) and ((toscalar(branchFilter | count) == 0) or Branch in (branchFilter))
| join kind = inner (WorkItems) on JobId
| join kind = inner (TestResults) on WorkItemId
| where Result == "Fail"
| extend NameSegments = split(WorkItemFriendlyName, "--")
| extend Project = tostring(NameSegments[0]), Framework = tostring(NameSegments[1]), RunTypeFromName = iif(array_length(NameSegments) > 2, NameSegments[2], "")
| extend ParsedProps = parse_json(Properties)
| extend RunTypeFromProps = tostring(ParsedProps.runType), BuildNumber = tostring(ParsedProps.buildNumber), BuildDefinition = tostring(ParsedProps.buildDefinition)
| extend RunType = coalesce(RunTypeFromName, RunTypeFromProps)
| where IncludeQuarantined or (RunType != "quarantined") 
| extend IsQuarantined = (Traits contains "Flaky") or (Traits contains "Quarantine")
| project 
    JobId = coalesce(JobId, 0), 
    WorkItemId = coalesce(WorkItemId, 0),
    BuildNumber,
    BuildDefinition,
    RunType,
    Started = Started1, 
    Finished = Finished1, 
    ConsoleUri, 
    Uri, 
    QueueName = QueueName1, 
    Type = Type1, 
    Method, 
    Arguments, 
    ArgumentHash, 
    Result, 
    Duration, 
    Exception, 
    Message, 
    StackTrace, 
    Traits, 
    IsQuarantined = coalesce(IsQuarantined, bool(false)), 
    SkipReason = Reason, 
    Project, 
    Framework
| sort by Finished desc