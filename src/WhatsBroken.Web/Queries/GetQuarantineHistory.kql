// *****************************************
// Gets the quarantine history for the test.
// *****************************************
declare query_parameters (
    TestProject: string = "dotnet-microsoft.openapi.Tests", 
    TestType: string = "Microsoft.DotNet.OpenApi.Add.Tests.OpenApiAddFileTests",
    TestMethod: string = "OpenApi_Add_MultipleTimes_OnlyOneReference",
    TestArgumentHash: string = "*",
    Limit: int = 1000);

// Grab the most recent unquarantined run of this test
let lastUnquarantinedDate = toscalar(TestResults
| where Type == TestType and Method == TestMethod and (TestArgumentHash == "*" or ArgumentHash == TestArgumentHash)
| extend NameSegments = split(WorkItemFriendlyName, "--")
| extend Project = tostring(NameSegments[0]), Framework = tostring(NameSegments[1]), RunTypeFromName = iif(array_length(NameSegments) > 2, NameSegments[2], "")
| where Project == TestProject
| project-away NameSegments
| join (WorkItems) on WorkItemId
| join (Jobs) on JobId
| top Limit by Finished desc
| where not((Traits contains "Flaky") or (Traits contains "Quarantine"))
| project Finished
| take 1);

// Now compute over all the tests since then
TestResults
| where Type == TestType and Method == TestMethod and (TestArgumentHash == "*" or ArgumentHash == TestArgumentHash)
| extend NameSegments = split(WorkItemFriendlyName, "--")
| extend Project = tostring(NameSegments[0]), Framework = tostring(NameSegments[1]), RunTypeFromName = iif(array_length(NameSegments) > 2, NameSegments[2], "")
| where Project == TestProject
| project-away NameSegments
| join (WorkItems) on WorkItemId
| join (Jobs) on JobId
| extend IsQuarantined = (Traits contains "Flaky") or (Traits contains "Quarantine")
| where IsQuarantined and Finished > lastUnquarantinedDate
| extend ParsedProps = parse_json(Properties)
| extend 
    RunTypeFromProps = tostring(ParsedProps.runType), 
    BuildNumber = tostring(ParsedProps.buildNumber), 
    BuildDefinition = tostring(ParsedProps.buildDefinition),
    BuildId = tostring(ParsedProps.buildId),
    AzDoProject = tostring(ParsedProps.azdoProject)
| extend RunType = coalesce(RunTypeFromName, RunTypeFromProps)
| project 
    JobId = coalesce(JobId, 0), 
    WorkItemId = coalesce(WorkItemId, 0),
    BuildNumber,
    BuildDefinition,
    RunType,
    Started = Started1, 
    Finished = Finished1, 
    ConsoleUri, 
    Uri, 
    QueueName = QueueName1, 
    Type, 
    Method, 
    Arguments, 
    ArgumentHash, 
    Result, 
    Duration, 
    Exception, 
    Message, 
    StackTrace, 
    Traits, 
    IsQuarantined = coalesce(IsQuarantined, bool(false)), 
    SkipReason = Reason, 
    Project, 
    Framework
