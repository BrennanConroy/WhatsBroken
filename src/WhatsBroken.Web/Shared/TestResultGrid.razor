@if (Results is object)
{
    <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="false" AllowSorting="true" Data="@Results">
        <Template>
            @* The expanded view for a TestResult *@
            <h4 class="text-monospace">@context.Project/@(context.Type).@(context.Method)(@context.Arguments) <TestHistoryLink Result="context" /></h4>

            @if (context.Result == "Fail")
            {
                <h5>
                    Failed in 
                    <BuildLink BuildId="@context.BuildId" Project="@context.AzDoProject">@FormatBuildInfo(context)</BuildLink>
                    <small class="text-muted">@context.QueueName</small>
                </h5>

                <h5>Duration: @context.Duration</h5>

                <h5>Failure Message</h5>
                <CodePanel>@context.Message</CodePanel>
                <h5>Stack Trace</h5>
                <CodePanel>@context.StackTrace</CodePanel>
            }
            else if(context.Result == "Skip")
            {
                <h5>
                    Skipped in 
                    <BuildLink BuildId="@context.BuildId" Project="@context.AzDoProject">@FormatBuildInfo(context)</BuildLink>
                    <small class="text-muted">@context.QueueName</small>
                </h5>

                <h5>@context.SkipReason</h5>
            }
            else if(context.Result == "Pass")
            {
                <h5>
                    Passed in 
                    <BuildLink BuildId="@context.BuildId" Project="@context.AzDoProject">@FormatBuildInfo(context)</BuildLink>
                    <small class="text-muted">@context.QueueName</small>
                </h5>

                <h5>Duration: @context.Duration</h5>
            }
        </Template>
        <Columns>
            <RadzenGridColumn TItem="TestResult" Title="Date" Width="150px">
                <Template>
                    <span title="@FormatBuildInfo(context)" class="@GetColor(context)">
                        @switch(context.Result)
                        {
                            case "Skip":
                                @:➖
                                break;
                            case "Fail":
                                @:❌
                                break;
                            default:
                                @:✔
                                break;
                        }

                        @if (string.IsNullOrEmpty(context.BuildId))
                        {
                            @context.Finished.Humanize()
                        }
                        else
                        {
                            <a href="https://dev.azure.com/dnceng/@(context.AzDoProject)/_build/results?buildId=@(context.BuildId)&view=ms.vss-test-web.build-test-results-tab" target="_blank">
                                @context.Finished.Humanize()
                            </a>
                        }

                        @if(context.IsQuarantined)
                        {
                            @:🏥
                        }
                    </span>
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="TestResult" Title="Project">
                <Template><span title="@context.Project">@context.Project</span></Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="TestResult" Title="Type">
                <Template><span class="text-monospace" title="@context.Type">@CompactNamespace(context.Type)</span></Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="TestResult" Title="Method">
                <Template><span class="text-monospace" title="@(context.Method)(@context.Arguments)">@(context.Method)(@context.Arguments)</span></Template>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>
}

@code {
    [Parameter]
    public IEnumerable<TestResult>? Results { get; set; }

    string FormatBuildInfo(TestResult result)
    {
        if (string.IsNullOrEmpty(result.BuildNumber))
        {
            return "unknown build";
        }
        return $"{result.BuildDefinition}#{result.BuildNumber}";
    }

    string GetColor(TestResult result)
    {
        return result.Result switch
        {
            "Fail" => "text-danger",
            "Skip" => "text-secondary",
            _ => "text-success",
        };
    }
}
